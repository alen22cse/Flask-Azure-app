# azure-pipelines.yml
trigger:
- main

variables:
  # App Configuration
  APP_NAME: 'my-flask-app'
  RESOURCE_GROUP: 'my-resource-group'
  PYTHON_VERSION: '3.11'
  VM_IMAGE: 'ubuntu-latest'
  
  # Reference variable group
  -group: azure-creds

stages:
- stage: Validate
  displayName: Validate Variables
  jobs:
  - job: Validate
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - script: |
        echo "##[group]Variable Validation"
        echo "TENANT_ID: $(AZURE_TENANT_ID)"
        echo "CLIENT_ID: $(AZURE_CLIENT_ID)"
        echo "SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)"
        echo "RESOURCE_GROUP: $(RESOURCE_GROUP)"
        echo "APP_NAME: $(APP_NAME)"
        echo "##[endgroup]"
        
        if [ -z "$(AZURE_TENANT_ID)" ]; then
          echo "##vso[task.logissue type=error]AZURE_TENANT_ID is empty!"
          exit 1
        fi
      displayName: 'Verify Required Variables'
      env:
        AZURE_TENANT_ID: $(AZURE_TENANT_ID)
        AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
        AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)

- stage: Build
  displayName: Build and Test
  dependsOn: Validate
  jobs:
  - job: Build
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - checkout: self

    - task: UsePythonVersion@0
      displayName: 'Setup Python'
      inputs:
        versionSpec: $(PYTHON_VERSION)

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install gunicorn pytest
      displayName: 'Install dependencies'

    - script: |
        if ls **/test_*.py 1> /dev/null 2>&1; then
          pytest --junitxml=test-results/pytest.xml
        else
          echo "##vso[task.logissue type=warning]No test files found"
          mkdir -p test-results
          echo '<testsuite></testsuite>' > test-results/pytest.xml
        fi
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/pytest.xml'
        testRunTitle: 'Pytest Results'
      condition: always()

    - task: ArchiveFiles@2
      displayName: 'Package artifact'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Deploy
  displayName: Deploy to Azure
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'

    # Fixed deployment with absolute variable certainty
    - bash: |
        set -e
        echo "##[group]Environment Variables"
        printenv | grep -E 'TENANT_ID|CLIENT_ID|SUBSCRIPTION_ID'
        echo "##[endgroup]"
        
        if [ -z "$TENANT_ID" ]; then
          echo "##vso[task.logissue type=error]TENANT_ID is empty!"
          exit 1
        fi

        echo "##[section]Authenticating with Azure..."
        az login --service-principal \
          -u "$CLIENT_ID" \
          -p "$CLIENT_SECRET" \
          --tenant "$TENANT_ID"
        
        echo "##[section]Setting subscription..."
        az account set --subscription "$SUBSCRIPTION_ID"
        
        echo "##[section]Verifying resources..."
        az webapp show \
          --name "$APP_NAME" \
          --resource-group "$RESOURCE_GROUP"
        
        echo "##[section]Starting deployment..."
        az webapp deployment source config-zip \
          --resource-group "$RESOURCE_GROUP" \
          --name "$APP_NAME" \
          --src "$(System.ArtifactsDirectory)/drop/app.zip"
        
        echo "##[section]Deployment successful!"
        echo "##[command]App URL: https://$APP_NAME.azurewebsites.net"
      displayName: 'Deploy to App Service'
      env:
        CLIENT_ID: $(AZURE_CLIENT_ID)
        CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
        TENANT_ID: $(AZURE_TENANT_ID)
        SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
        RESOURCE_GROUP: $(RESOURCE_GROUP)
        APP_NAME: $(APP_NAME)
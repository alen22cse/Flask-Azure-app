# azure-pipelines.yml
trigger:
- main

variables:
  # Application Configuration
  APP_NAME: 'my-flask-app'
  RESOURCE_GROUP: 'flask-app-free-rg'
  PYTHON_VERSION: '3.11'
  VM_IMAGE: 'ubuntu-latest'
  
  # Reference variable group (must contain all Azure credentials)
  -group: azure-creds  # Contains:
    # AZURE_TENANT_ID
    # AZURE_CLIENT_ID
    # AZURE_CLIENT_SECRET (marked as secret)
    # AZURE_SUBSCRIPTION_ID

stages:
- stage: Validate
  displayName: Validate Configuration
  jobs:
  - job: Validate
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - task: Bash@3
      displayName: 'Verify Azure Credentials'
      inputs:
        targetType: 'inline'
        script: |
          echo "##[group]Azure Credentials Validation"
          echo "Tenant ID: $(AZURE_TENANT_ID)"
          echo "Client ID: $(AZURE_CLIENT_ID)"
          echo "Subscription ID: $(AZURE_SUBSCRIPTION_ID)"
          echo "##[endgroup]"
          
          if [ -z "$(AZURE_TENANT_ID)" ]; then
            echo "##vso[task.logissue type=error]AZURE_TENANT_ID is empty!"
            exit 1
          fi
          
          if [ -z "$(AZURE_CLIENT_ID)" ]; then
            echo "##vso[task.logissue type=error]AZURE_CLIENT_ID is empty!"
            exit 1
          fi
          
          if [ -z "$(AZURE_SUBSCRIPTION_ID)" ]; then
            echo "##vso[task.logissue type=error]AZURE_SUBSCRIPTION_ID is empty!"
            exit 1
          fi
          
          echo "##[section]All credentials validated successfully"

- stage: Build
  displayName: Build and Test
  dependsOn: Validate
  jobs:
  - job: Build
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - checkout: self

    - task: UsePythonVersion@0
      displayName: 'Setup Python'
      inputs:
        versionSpec: $(PYTHON_VERSION)

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install gunicorn pytest
      displayName: 'Install dependencies'

    - script: |
        if [ -n "$(find . -name 'test_*.py' -print -quit)" ]; then
          pytest --junitxml=test-results/pytest.xml
        else
          echo "##vso[task.logissue type=warning]No test files found"
          mkdir -p test-results
          echo '<testsuite></testsuite>' > test-results/pytest.xml
        fi
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/pytest.xml'
        testRunTitle: 'Pytest Results'
      condition: always()

    - task: ArchiveFiles@2
      displayName: 'Create deployment package'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Deploy
  displayName: Deploy to Azure
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - download: current
      artifact: drop

    - task: Bash@3
      displayName: 'Deploy to App Service'
      inputs:
        targetType: 'inline'
        script: |
          set -e
          echo "##[group]Azure Deployment Configuration"
          echo "App Name: $(APP_NAME)"
          echo "Resource Group: $(RESOURCE_GROUP)"
          echo "Tenant ID: $(AZURE_TENANT_ID)"
          echo "Client ID: $(AZURE_CLIENT_ID)"
          echo "Subscription ID: $(AZURE_SUBSCRIPTION_ID)"
          echo "##[endgroup]"
          
          echo "##[section]Authenticating with Azure..."
          az login --service-principal \
            -u "$(AZURE_CLIENT_ID)" \
            -p "$CLIENT_SECRET" \
            --tenant "$(AZURE_TENANT_ID)" || {
              echo "##vso[task.logissue type=error]Azure authentication failed"
              exit 1
            }
          
          echo "##[section]Setting active subscription..."
          az account set --subscription "$(AZURE_SUBSCRIPTION_ID)" || {
            echo "##vso[task.logissue type=error]Failed to set subscription"
            exit 1
          }
          
          echo "##[section]Deploying application..."
          az webapp deployment source config-zip \
            --resource-group "$(RESOURCE_GROUP)" \
            --name "$(APP_NAME)" \
            --src "$(Pipeline.Workspace)/drop/app.zip" || {
              echo "##vso[task.logissue type=error]Deployment failed"
              exit 1
            }
          
          echo "##[section]Deployment successful!"
          echo "##[command]App URL: https://$(APP_NAME).azurewebsites.net"
      env:
        CLIENT_SECRET: $(AZURE_CLIENT_SECRET)  # Secret injected here
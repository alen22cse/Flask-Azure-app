# azure-pipelines.yml
trigger:
- main

variables:
  # Hardcoded configuration (REPLACE THESE VALUES)
  AZURE_TENANT_ID: '1179f18f-155e-4233-a144-27bc24f64401'  # From 'az account show'
  APP_NAME: 'my-flask-app'                                 # Must match Azure App Service
  RESOURCE_GROUP: 'flask-app-free-rg'                      # Existing resource group
  PYTHON_VERSION: '3.11'
  VM_IMAGE: 'ubuntu-latest'
  
  # Reference variable group (create in Pipelines â†’ Library)
  -group: azure-creds  # Must contain:
    # AZURE_CLIENT_ID
    # AZURE_CLIENT_SECRET
    # AZURE_SUBSCRIPTION_ID

stages:
- stage: Validate
  displayName: Validate Setup
  jobs:
  - job: Validate
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - bash: |
        echo "##[group]Azure Configuration"
        echo "Tenant ID: $(AZURE_TENANT_ID)"
        echo "Client ID: $(AZURE_CLIENT_ID)"
        echo "Subscription ID: $(AZURE_SUBSCRIPTION_ID)"
        echo "##[endgroup]"
        
        # Verify all required variables exist
        if [ -z "$(AZURE_TENANT_ID)" ]; then
          echo "##vso[task.logissue type=error]AZURE_TENANT_ID is empty!"
          exit 1
        fi
        
        if [ -z "$(AZURE_CLIENT_ID)" ]; then
          echo "##vso[task.logissue type=error]AZURE_CLIENT_ID is empty!"
          exit 1
        fi
        
        if [ -z "$(AZURE_SUBSCRIPTION_ID)" ]; then
          echo "##vso[task.logissue type=error]AZURE_SUBSCRIPTION_ID is empty!"
          exit 1
        fi
        
        echo "##[section]All variables validated successfully"
      displayName: 'Verify Azure Credentials'

- stage: Build
  displayName: Build and Test
  dependsOn: Validate
  jobs:
  - job: Build
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - checkout: self

    - task: UsePythonVersion@0
      displayName: 'Setup Python'
      inputs:
        versionSpec: $(PYTHON_VERSION)

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install gunicorn pytest
      displayName: 'Install dependencies'

    - script: |
        if ls **/test_*.py 1> /dev/null 2>&1; then
          pytest --junitxml=test-results/pytest.xml
        else
          echo "##vso[task.logissue type=warning]No test files found"
          mkdir -p test-results
          echo '<testsuite></testsuite>' > test-results/pytest.xml
        fi
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/pytest.xml'
        testRunTitle: 'Pytest Results'
      condition: always()

    - task: ArchiveFiles@2
      displayName: 'Create deployment package'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Deploy
  displayName: Deploy to Azure
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - download: current  # New recommended download method
      artifact: drop

    - bash: |
        set -e
        echo "##[group]Deployment Configuration"
        echo "Tenant ID: $(AZURE_TENANT_ID)"
        echo "Client ID: $(AZURE_CLIENT_ID)"
        echo "Subscription ID: $(AZURE_SUBSCRIPTION_ID)"
        echo "Resource Group: $(RESOURCE_GROUP)"
        echo "App Name: $(APP_NAME)"
        echo "##[endgroup]"
        
        echo "##[section]Authenticating with Azure..."
        az login --service-principal \
          -u "$(AZURE_CLIENT_ID)" \
          -p "$CLIENT_SECRET" \
          --tenant "$(AZURE_TENANT_ID)" || {
            echo "##vso[task.logissue type=error]Azure authentication failed"
            exit 1
          }
        
        echo "##[section]Setting subscription..."
        az account set --subscription "$(AZURE_SUBSCRIPTION_ID)"
        
        echo "##[section]Deploying application..."
        az webapp deployment source config-zip \
          --resource-group "$(RESOURCE_GROUP)" \
          --name "$(APP_NAME)" \
          --src "$(Pipeline.Workspace)/drop/app.zip" || {
            echo "##vso[task.logissue type=error]Deployment failed"
            exit 1
          }
        
        echo "##[section]Deployment successful!"
        echo "##[command]App URL: https://$(APP_NAME).azurewebsites.net"
      displayName: 'Deploy to App Service'
      env:
        CLIENT_SECRET: $(AZURE_CLIENT_SECRET)  # Only secret needs env mapping